{
    "text": "<p>still haven't quit yet</p><p>Didn't get as much done as I wanted to this week, but I still did a few things.</p><h3>Weapons & Enemies</h3><p>I got a basic weapon working, as well as a simple enemy to test it. The way I'm handling weapons is slightly unusual I think, so I'm gonna write a bit about that.</p><p>My first basic test weapon is a whip. It swings above the user's head before whipping forward to hit the enemy. The swing takes three frames of animation to complete, the first two being above the user and the third in front. The trick here is that each frame has its own collision; the first two collide with enemies above, and the third with enemies in front. I couldn't do this with 001's regular animations though, because a single sprite can only have one collision; it can't change between frames.</p><p>The workaround is actually pretty simple. Since each sprite can only have one collision, I just have to use multiple sprites. In my current test weapon, I'm using a while/timer to switch between the sprites. I might switch to using delays in a Loaded trigger later, because that would make  variable time between frames much easier to implement and enable some more complex logic abut the weapon's workings.</p><p>There was one other little snafu in my weapon, however. When I had the thing put together and tried to hit the test enemy, nothing happened. I was very confused for a while, until I realized that the weapon's actor template was set to not process physics. I had assumed that just meant things like gravity and velocity; y'know, physics stuff. However, it seems to also disable collision detection. Not really a difficult thing to fix, just had to turn the physics on again, but it seemed worth noting here.</p><p>There's not actually much to say about the basic enemy; it's just a simple actor that takes damage when hit by a weapon and disappears when it runs out of health. What is interesting is the design behind it.</p><h3>Actor Templates</h3><p>Actor templates are very cool and good. On a basic level, they allow you to design one actor which can then be used multiple times. But they also enable inheritance; you can design one actor which has some basic functionality and then extend it with another actor which can be more specialized.</p><p>I'm using this to greatly simplify my weapons and enemies. I have two basic templates: Weapon and Enemy. Neither one is actually a fully functional weapon or enemy; instead, they each include only generic functionality shared by all of their children. For example, weapons have an attack value, and they subtract that value from an enemy's health upon a hit. All enemies have a health value, and upon losing all their health they disappear.</p><h3>Framerate-Independent Physics</h3><p>Or maybe Variable Tickrate Physics? Section titles are hard.</p><p>Currently, my physics run on a 50 tick-per-second timer. This is fine, and there are no notable issues most of the time. However, I am handling some input in that timer, poor as that decision may seem. So, I spent a decent bit of time trying to allow my physics to run at a variable rate, adjusting the numbers according to framerate so that the motion feels consistent. Turns out, I can't really do that.</p><p>My idea was to multiply the numbers in my calculations by <code>50 / Main.FPS</code>. In theory , this would result in numbers properly adjusted to the current framerate. However, some of my calculations, e.g. friction or gravity, occur gradually. In the case of friction, the player's horizontal velocity is reduced every tick. When running more than 50 times per second, this causes friction to occur faster because the horizontal speed is being reduced more often.</p><p>So my first idea doesn't work. I then searched the internet for possible help, and found <a href=\"https://gamedev.stackexchange.com/q/94000\">this question</a> on Stack Exchange. It describes the issue much more eloquently than I can, and the answers are very helpful. The long and short of it, though, is that I'm gonna stick with a fixed 50 tick-per-second physics system because it's already working and I don't want to change it too drastically.</p><h3>that's it</h3><p>That's all I have to say this week. Not sure what I'm doing next week; might continue work on enemies and test out some level design or maybe I'll start sketching some designs for the graphics? I dunno.</p>"
}
